// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transactions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (reference, created_at)
VALUES ($1, NOW())
RETURNING id, reference, created_at
`

func (q *Queries) CreateTransaction(ctx context.Context, reference sql.NullString) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, reference)
	var i Transaction
	err := row.Scan(&i.ID, &i.Reference, &i.CreatedAt)
	return i, err
}

const getTranscation = `-- name: GetTranscation :one
SELECT id, reference, created_at FROM transactions
WHERE id = $1
`

func (q *Queries) GetTranscation(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTranscation, id)
	var i Transaction
	err := row.Scan(&i.ID, &i.Reference, &i.CreatedAt)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, reference, created_at FROM transactions
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type ListTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(&i.ID, &i.Reference, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
